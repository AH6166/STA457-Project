# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16eKeL4W2y4sQ-KlylmJ1MHXJ6Ebl56BM

# Overall
1. dataset\
monthly dataset\
daily dataset
2. train:test\
8:2\
last 4 month
3. model\
LSTM\
XBoost

# LSTM
"""

import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
import matplotlib.pyplot as plt

# 1. Load data
df = pd.read_csv("price_climate.csv", parse_dates=["date"])
df.set_index("date", inplace=True)

# 2. Select features
data = df[["Price_Monthly_Avg", "PRCP_Monthly_Avg", "TAVG_Monthly_Avg"]].fillna(0)

# 3. Normalize features
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# 4. Create sequences
def create_sequences(data, seq_len):
    X, y = [], []
    for i in range(seq_len, len(data)):
        X.append(data[i-seq_len:i])
        y.append(data[i, 0])  # predict price only
    return np.array(X), np.array(y)

seq_len = 18  # use past 12 months
X, y = create_sequences(scaled_data, seq_len)

split = int(0.8 * len(X))
X_train, X_test = X[:split], X[split:]
y_train, y_test = y[:split], y[split:]

print(f"Test size: {len(y_test)}")
print(len(X))
print(len(X)*0.8)
print(len(df))

model = Sequential([
    LSTM(64, return_sequences=True, input_shape=(seq_len, X.shape[2])),
    LSTM(32),
    Dense(1)
])

model.compile(loss='mse', optimizer='adam')
model.summary()

# Train
history = model.fit(X_train, y_train, epochs=50, batch_size=16,
                    validation_data=(X_test, y_test), verbose=1)

# Predict
y_pred_scaled = model.predict(X_test)

# Rebuild full predicted series (merge back with rest of data for inverse transform)
dummy = np.zeros((len(y_pred_scaled), scaled_data.shape[1]))
dummy[:, 0] = y_pred_scaled[:, 0]  # only price column predicted

# Inverse transform
y_pred = scaler.inverse_transform(dummy)[:, 0]
y_actual = scaler.inverse_transform(np.concatenate([
    y_test.reshape(-1, 1),  # <-- Put price in the correct position
    np.zeros((len(y_test), scaled_data.shape[1]-1))
], axis=1))[:, 0]  # <-- Get the first column (price)

from sklearn.metrics import mean_squared_error, mean_absolute_error

rmse = np.sqrt(mean_squared_error(y_actual, y_pred))
mae = mean_absolute_error(y_actual, y_pred)
mape = np.mean(np.abs((y_actual - y_pred) / y_actual)) * 100

print(f"✅ RMSE: {rmse:.2f}")
print(f"✅ MAE: {mae:.2f}")
print(f"✅ MAPE: {mape:.2f}%")

plt.figure(figsize=(10, 5))
plt.plot(y_actual, label='Actual')
plt.plot(y_pred, label='Predicted')
plt.title("LSTM Forecast of Cocoa Prices")
plt.xlabel("Time (months)")
plt.ylabel("Price")
plt.legend()

plt.tight_layout()
plt.show()


# Assume this is your date Series from the dataset
# Replace this with your actual date column
# For example: dates = pd.to_datetime(df['date_column'])
dates = pd.date_range(start="2018-11", periods=len(y_actual), freq='M')

# Now plot using the dates
plt.figure(figsize=(12, 6))
plt.plot(dates, y_actual, label='Actual')
plt.plot(dates, y_pred, label='Predicted')

plt.title("LSTM Forecast of Cocoa Prices")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()

# Format the x-axis to show year-month
plt.gcf().autofmt_xdate()  # Rotate date labels
plt.tight_layout()
plt.show()

print(len(y_actual))

# Start from the last sequence in the dataset
last_sequence = scaled_data[-seq_len:].copy()

future_predictions_scaled = []

for _ in range(12):
    input_seq = last_sequence.reshape(1, seq_len, scaled_data.shape[1])
    pred = model.predict(input_seq, verbose=0)[0][0]

    # Build next row with predicted price, and dummy 0s for PRCP and TAVG
    next_row = np.zeros((scaled_data.shape[1],))
    next_row[0] = pred  # predicted price

    # Append prediction to list
    future_predictions_scaled.append(pred)

    # Update sequence: drop first, add new predicted row
    last_sequence = np.vstack((last_sequence[1:], next_row))

# Reconstruct dummy for inverse transform
dummy_future = np.zeros((len(future_predictions_scaled), scaled_data.shape[1]))
dummy_future[:, 0] = future_predictions_scaled

# Inverse transform to get price values
future_prices = scaler.inverse_transform(dummy_future)[:, 0]

# Get the last date from the original dataset
last_y_pred_date = df.index[seq_len + split + len(y_pred) - 1]
future_dates = pd.date_range(start=last_y_pred_date + pd.DateOffset(months=1), periods=12, freq='M')

print(df)
print(last_y_pred_date)
print(future_dates)

plt.figure(figsize=(12, 6))

# Plot existing predictions with actual values
plt.plot(dates, y_actual, label='Actual')
plt.plot(dates, y_pred, label='Predicted')

# Plot future predictions
plt.plot(future_dates, future_prices, label='Future Forecast', linestyle='--', marker='o')

plt.title("LSTM Forecast of Cocoa Prices (Including 12-Month Future Forecast)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.gcf().autofmt_xdate()
plt.tight_layout()
plt.show()
print(dates)

plt.figure(figsize=(12, 6))

# Plot actual and predicted
plt.plot(dates, y_actual, label='Actual')
plt.plot(dates, y_pred, label='Predicted')

# Fix the future dates starting right after last predicted month
last_y_pred_date = df.index[seq_len + split + len(y_pred) - 1]
future_dates = pd.date_range(start=last_y_pred_date + pd.DateOffset(months=1), periods=12, freq='M')

# Plot future predictions
plt.plot(future_dates, future_prices, label='Future Forecast', linestyle='--', marker='o', color='green')

plt.title("LSTM Forecast of Cocoa Prices (Including 12-Month Future Forecast)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.gcf().autofmt_xdate()
plt.tight_layout()
plt.show()

print(dates)
print(last_y_pred_date)

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.metrics import mean_squared_error, mean_absolute_error
from tensorflow.keras.layers import Dropout

# 1. Load data
df = pd.read_csv("price_climate.csv", parse_dates=["date"])
df.set_index("date", inplace=True)

# 2. Select features
data = df[["Price_Monthly_Avg", "PRCP_Monthly_Avg", "TAVG_Monthly_Avg"]].fillna(0)

# 3. Normalize features
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# 4. Create sequences WITH date tracking
def create_sequences_with_dates(data, dates, seq_len):
    X, y, y_dates = [], [], []
    for i in range(seq_len, len(data)):
        X.append(data[i - seq_len:i])
        y.append(data[i, 0])
        y_dates.append(dates[i])
    return np.array(X), np.array(y), np.array(y_dates)

seq_len = 6
dates = data.index  # datetime index
X, y, y_dates = create_sequences_with_dates(scaled_data, dates, seq_len)

# 5. Time-based split
train_cutoff = pd.Timestamp("2018-10-31")
test_start = pd.Timestamp("2018-11-30")

train_mask = y_dates <= train_cutoff
test_mask = y_dates >= test_start

X_train, y_train = X[train_mask], y[train_mask]
X_test, y_test = X[test_mask], y[test_mask]
test_dates = y_dates[test_mask]

# 6. Build LSTM model
model = Sequential([
    LSTM(64, return_sequences=True, input_shape=(seq_len, X.shape[2])),
    # Dropout(0.2),
    LSTM(32),
    # Dropout(0.2),
    Dense(1)
])
model.compile(loss='mse', optimizer='adam')
model.summary()

# 7. Train
history = model.fit(X_train, y_train, epochs=50, batch_size=16,
                    validation_data=(X_test, y_test), verbose=1)

# 8. Predict (on test set)
y_pred_scaled = model.predict(X_test)

# 9. Inverse transform
# For prediction: construct dummy to match shape
dummy_pred = np.zeros((len(y_pred_scaled), scaled_data.shape[1]))
dummy_pred[:, 0] = y_pred_scaled[:, 0]
y_pred = scaler.inverse_transform(dummy_pred)[:, 0]

# For actual: same for y_test
dummy_actual = np.zeros((len(y_test), scaled_data.shape[1]))
dummy_actual[:, 0] = y_test
y_actual = scaler.inverse_transform(dummy_actual)[:, 0]

# 10. Metrics
rmse = np.sqrt(mean_squared_error(y_actual, y_pred))
mae = mean_absolute_error(y_actual, y_pred)
mape = np.mean(np.abs((y_actual - y_pred) / y_actual)) * 100
print(f"✅ RMSE: {rmse:.2f}")
print(f"✅ MAE: {mae:.2f}")
print(f"✅ MAPE: {mape:.2f}%")

# print(f"✅ ME (Mean Error): {me:.2f}")


# 11. Plot
plt.figure(figsize=(12, 6))
plt.plot(test_dates, y_actual, label='Actual')
plt.plot(test_dates, y_pred, label='Predicted')
plt.title("LSTM Forecast of Cocoa Prices (Test: From 2018-11-30)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

me = np.mean(y_pred - y_actual)
abs_me = abs(me)
print(f"✅ ME (Mean Error): {abs_me:.2f}")

# Start with the last known sequence
last_sequence = scaled_data[-seq_len:].copy()  # shape: (18, 3)

future_predictions_scaled = []

for _ in range(6):
    input_seq = last_sequence.reshape(1, seq_len, scaled_data.shape[1])
    pred = model.predict(input_seq, verbose=0)[0][0]

    # Prepare next input row: predicted price + dummy 0s for other features
    next_row = np.zeros((scaled_data.shape[1],))
    next_row[0] = pred

    # Append to sequence and slide window
    last_sequence = np.vstack((last_sequence[1:], next_row))
    future_predictions_scaled.append(pred)

# Inverse transform predicted values
dummy_future = np.zeros((6, scaled_data.shape[1]))
dummy_future[:, 0] = future_predictions_scaled
future_prices = scaler.inverse_transform(dummy_future)[:, 0]

last_known_date = df.index[-1]
future_dates = pd.date_range(start=last_known_date + pd.DateOffset(months=1), periods=6, freq='M')

plt.figure(figsize=(12, 6))

# Plot previous predictions
plt.plot(test_dates, y_actual, label='Actual')
plt.plot(test_dates, y_pred, label='Predicted')

# Plot future predictions
plt.plot(future_dates, future_prices, label='Future Forecast (Next 12 Months)', linestyle='--', marker='o', color='green')

plt.title("LSTM Forecast of Cocoa Prices (Including 12-Month Future Forecast)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense
from sklearn.metrics import mean_squared_error, mean_absolute_error
from tensorflow.keras.layers import Dropout

# 1. Load data
df = pd.read_csv("price_climate.csv", parse_dates=["date"])
df.set_index("date", inplace=True)

# 2. Select features
data = df[["Price_Monthly_Avg", "TAVG_Monthly_Avg"]].fillna(0)

# 3. Normalize features
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# 4. Create sequences WITH date tracking
def create_sequences_with_dates(data, dates, seq_len):
    X, y, y_dates = [], [], []
    for i in range(seq_len, len(data)):
        X.append(data[i - seq_len:i])
        y.append(data[i, 0])
        y_dates.append(dates[i])
    return np.array(X), np.array(y), np.array(y_dates)

seq_len = 12
dates = data.index  # datetime index
X, y, y_dates = create_sequences_with_dates(scaled_data, dates, seq_len)

# 5. Time-based split
train_cutoff = pd.Timestamp("2024-07-31")
test_start = pd.Timestamp("2024-08-31")

train_mask = y_dates <= train_cutoff
test_mask = y_dates >= test_start

X_train, y_train = X[train_mask], y[train_mask]
X_test, y_test = X[test_mask], y[test_mask]
test_dates = y_dates[test_mask]

# 6. Build LSTM model
model = Sequential([
    LSTM(128, return_sequences=True, input_shape=(seq_len, X.shape[2])),
    # Dropout(0.3),
    LSTM(64),
    # Dropout(0.3),
    Dense(1)
])
model.compile(loss='mse', optimizer='adam')
model.summary()

# 7. Train
history = model.fit(X_train, y_train, epochs=100, batch_size=16,
                    validation_data=(X_test, y_test), verbose=1)

# 8. Predict (on test set)
y_pred_scaled = model.predict(X_test)

# 9. Inverse transform
# For prediction: construct dummy to match shape
dummy_pred = np.zeros((len(y_pred_scaled), scaled_data.shape[1]))
dummy_pred[:, 0] = y_pred_scaled[:, 0]
y_pred = scaler.inverse_transform(dummy_pred)[:, 0]

# For actual: same for y_test
dummy_actual = np.zeros((len(y_test), scaled_data.shape[1]))
dummy_actual[:, 0] = y_test
y_actual = scaler.inverse_transform(dummy_actual)[:, 0]

# 10. Metrics
rmse = np.sqrt(mean_squared_error(y_actual, y_pred))
mae = mean_absolute_error(y_actual, y_pred)
mape = np.mean(np.abs((y_actual - y_pred) / y_actual)) * 100
print(f"✅ RMSE: {rmse:.2f}")
print(f"✅ MAE: {mae:.2f}")
print(f"✅ MAPE: {mape:.2f}%")

# print(f"✅ ME (Mean Error): {me:.2f}")


# 11. Plot
plt.figure(figsize=(12, 6))
plt.plot(test_dates, y_actual, label='Actual')
plt.plot(test_dates, y_pred, label='Predicted')
plt.title("LSTM Forecast of Cocoa Prices (Test: From 2018-11-30)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# === 12. Forecast future prices recursively (Next 4 months) ===
future_months = 4
last_sequence = scaled_data[-seq_len:].copy()
future_predictions_scaled = []

for _ in range(future_months):
    input_seq = last_sequence.reshape(1, seq_len, scaled_data.shape[1])
    pred = model.predict(input_seq, verbose=0)[0][0]

    # Next row for sequence (predicted price, 0 for TAVG)
    next_row = np.zeros((scaled_data.shape[1],))
    next_row[0] = pred
    last_sequence = np.vstack((last_sequence[1:], next_row))

    future_predictions_scaled.append(pred)

# === 13. Inverse transform future predictions ===
dummy_future = np.zeros((future_months, scaled_data.shape[1]))
dummy_future[:, 0] = future_predictions_scaled
future_prices = scaler.inverse_transform(dummy_future)[:, 0]

# === 14. Future date index ===
last_known_date = df.index[-1]
future_dates = pd.date_range(start=last_known_date + pd.DateOffset(months=1), periods=future_months, freq='MS')

# === 15. Plot (Full Timeline + Forecast) ===
plt.figure(figsize=(14, 6))
plt.plot(df.index, df['Price_Monthly_Avg'], label='Actual (Full Timeline)', color='blue')
plt.plot(test_dates, y_pred, label='Predicted (Last 4 Months)', color='orange', marker='o')
plt.plot(future_dates, future_prices, label='Forecast (Next 4 Months)', color='green', linestyle='--', marker='o')
plt.plot([test_dates[-1], future_dates[0]], [y_pred[-1], future_prices[0]], color='green', linestyle='--')
plt.title("LSTM Cocoa Price Forecast (Full Timeline)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# === 16. Plot (Zoomed In: Last 4 Months + Future 4 Months) ===
plt.figure(figsize=(14, 6))
plt.plot(test_dates, y_actual, label='Actual (Last 4 Months)', color='blue')
plt.plot(test_dates, y_pred, label='Predicted (Last 4 Months)', color='orange', marker='o')
plt.plot(future_dates, future_prices, label='Forecast (Next 4 Months)', color='green', linestyle='--', marker='o')
plt.plot([test_dates[-1], future_dates[0]], [y_pred[-1], future_prices[0]], color='green', linestyle='--')
plt.title("LSTM Cocoa Price Forecast (Zoomed: Last 4M + Next 4M)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# 12. Full timeline plot with predicted overlay

# Extract full ground truth series (actual prices)
full_dates = df.index
full_prices = df["Price_Monthly_Avg"].values

# Plot full actual price series
plt.figure(figsize=(14, 6))
plt.plot(full_dates, full_prices, label="Actual (1994–2024)", color="blue")

# Overlay predicted values for last 4 months only
plt.plot(test_dates, y_pred, label="LSTM Forecast (Last 4 Months)", color="orange", marker='o')

# Optional: connect last actual to first prediction (not required but makes plot flow)
plt.plot([test_dates[0] - pd.DateOffset(months=1), test_dates[0]],
         [df.loc[test_dates[0] - pd.DateOffset(months=1), "Price_Monthly_Avg"], y_pred[0]],
         color="gray", linestyle="--", linewidth=1)

# Final touches
plt.title("Full Timeline of Cocoa Prices with LSTM Forecast (Last 4 Months)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.figure(figsize=(14, 6))

# 1. Plot the full actual truth timeline (1994–2024)
plt.plot(df.index, df["Price_Monthly_Avg"], label='Actual (1994–2024)', color='blue')

# 2. Plot the last 4 months of predicted values
plt.plot(test_dates, y_pred, label='LSTM Prediction (Last 4 Months)', color='orange', marker='o')

# 3. Forecast future 4 months
plt.plot(future_dates, future_prices, label='Forecast (Next 4 Months)', color='green', linestyle='--', marker='o')

# Optional: connect last prediction to first forecast point
plt.plot(
    [test_dates[-1], future_dates[0]],
    [y_pred[-1], future_prices[0]],
    color='green', linestyle='--'
)

# Final plot formatting
plt.title("LSTM Forecast of Cocoa Prices (Full Timeline + Last 4-Month Prediction + 4-Month Forecast)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt

plt.figure(figsize=(14, 6))

# 1. Plot the actual (true) values for the last 4 months
plt.plot(test_dates, y_actual, label='Actual (Last 4 Months)', color='blue', linewidth=2)

# 2. Plot the predicted values for the last 4 months
plt.plot(test_dates, y_pred, label='Predicted (Last 4 Months)', color='orange', linestyle='--', marker='o')

# 3. Plot the forecasted values for the next 4 months
plt.plot(future_dates, future_prices, label='Forecast (Next 4 Months)', color='green', linestyle='--', marker='o')

# Optional: connect last prediction to first forecast point
plt.plot(
    [test_dates[-1], future_dates[0]],
    [y_pred[-1], future_prices[0]],
    color='green', linestyle='--'
)

# Final plot formatting
plt.title("LSTM Cocoa Price Forecast: Last 4-Month Prediction and 4-Month Forecast")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.grid(True)
plt.tight_layout()
plt.show()

# Start with the last known sequence
last_sequence = scaled_data[-seq_len:].copy()  # shape: (18, 3)

future_predictions_scaled = []

for _ in range(4):
    input_seq = last_sequence.reshape(1, seq_len, scaled_data.shape[1])
    pred = model.predict(input_seq, verbose=0)[0][0]

    # Prepare next input row: predicted price + dummy 0s for other features
    next_row = np.zeros((scaled_data.shape[1],))
    next_row[0] = pred

    # Append to sequence and slide window
    last_sequence = np.vstack((last_sequence[1:], next_row))
    future_predictions_scaled.append(pred)

# Inverse transform predicted values
dummy_future = np.zeros((4, scaled_data.shape[1]))
dummy_future[:, 0] = future_predictions_scaled
future_prices = scaler.inverse_transform(dummy_future)[:, 0]
last_known_date = df.index[-1]
future_dates = pd.date_range(start=last_known_date, periods=4, freq='M')
#  + pd.DateOffset(months=1)
plt.figure(figsize=(12, 6))

# Plot previous predictions
plt.plot(test_dates, y_actual, label='Actual')
plt.plot(test_dates, y_pred, label='Predicted')

# Plot future predictions
# Connect last predicted point to first future point
plt.plot(
    [test_dates[-1], future_dates[0]],
    [y_actual[-1], future_prices[0]],
    color='green', linestyle='--'
)

plt.plot(future_dates, future_prices, label='Future Forecast (Next 12 Months)', linestyle='--', marker='o', color='green')

plt.title("LSTM Forecast of Cocoa Prices (Including 12-Month Future Forecast)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

plt.plot(future_dates, future_prices, label='Future Forecast (Next 12 Months)', linestyle='--', marker='o', color='green')
for date, price in zip(future_dates, future_prices):
    print(f"{date.strftime('%Y-%m')}: {price:.2f}")

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from sklearn.metrics import mean_squared_error, mean_absolute_error

# 1. Load data
df = pd.read_csv("daily_dataset.csv", parse_dates=["DATE"])
df.set_index("DATE", inplace=True)

# 2. Select features
data = df[["price", "PRCP", "TAVG"]].fillna(0)

# 3. Normalize features
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)

# 4. Create sequences WITH date tracking
def create_sequences_with_dates(data, dates, seq_len):
    X, y, y_dates = [], [], []
    for i in range(seq_len, len(data)):
        X.append(data[i - seq_len:i])
        y.append(data[i, 0])
        y_dates.append(dates[i])
    return np.array(X), np.array(y), np.array(y_dates)

seq_len = 30
dates = data.index  # datetime index
X, y, y_dates = create_sequences_with_dates(scaled_data, dates, seq_len)

# 5. Time-based split using last 4 months as test
last_date = y_dates[-1]
test_start_date = (last_date - pd.DateOffset(months=4)).replace(day=1)

train_mask = y_dates < test_start_date
test_mask = y_dates >= test_start_date

X_train, y_train = X[train_mask], y[train_mask]
X_test, y_test = X[test_mask], y[test_mask]
test_dates = y_dates[test_mask]

# 6. Build LSTM model
model = Sequential([
    LSTM(128, return_sequences=True, input_shape=(seq_len, X.shape[2])),
    Dropout(0.3),
    LSTM(64),
    Dropout(0.3),
    Dense(1)
])
model.compile(loss='mse', optimizer='adam')
model.summary()

# 7. Train
history = model.fit(X_train, y_train, epochs=100, batch_size=16,
                    validation_data=(X_test, y_test), verbose=1)

# 8. Predict (on test set)
y_pred_scaled = model.predict(X_test)

# 9. Inverse transform
dummy_pred = np.zeros((len(y_pred_scaled), scaled_data.shape[1]))
dummy_pred[:, 0] = y_pred_scaled[:, 0]
y_pred = scaler.inverse_transform(dummy_pred)[:, 0]

dummy_actual = np.zeros((len(y_test), scaled_data.shape[1]))
dummy_actual[:, 0] = y_test
y_actual = scaler.inverse_transform(dummy_actual)[:, 0]

# 10. Metrics
rmse = np.sqrt(mean_squared_error(y_actual, y_pred))
mae = mean_absolute_error(y_actual, y_pred)
mape = np.mean(np.abs((y_actual - y_pred) / y_actual)) * 100
print(f"✅ RMSE: {rmse:.2f}")
print(f"✅ MAE: {mae:.2f}")
print(f"✅ MAPE: {mape:.2f}%")

# 11. Plot
plt.figure(figsize=(12, 6))
plt.plot(test_dates, y_actual, label='Actual')
plt.plot(test_dates, y_pred, label='Predicted')
plt.title("LSTM Forecast of Daily Cocoa Prices (Last 4 Months = Test)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np

# Assume the following variables are already defined:
# df: original dataframe with 'Price' column and datetime index
# test_dates: dates for the last 4 months (test set)
# y_actual: actual prices in the last 4 months
# y_pred: predicted prices in the last 4 months
# future_dates: dates for the next 4 months
# future_prices: predicted prices for the next 4 months
future_days = 120  # approx 4 months
last_sequence = scaled_data[-seq_len:].copy()
future_predictions_scaled = []

for _ in range(future_days):
    input_seq = last_sequence.reshape(1, seq_len, scaled_data.shape[1])
    pred = model.predict(input_seq, verbose=0)[0][0]

    # Create next input row: predicted price, and 0 for PRCP and TAVG
    next_row = np.zeros((scaled_data.shape[1],))
    next_row[0] = pred  # predicted price

    # Update the sequence
    last_sequence = np.vstack((last_sequence[1:], next_row))
    future_predictions_scaled.append(pred)

# 13. Inverse transform predictions
dummy_future = np.zeros((len(future_predictions_scaled), scaled_data.shape[1]))
dummy_future[:, 0] = future_predictions_scaled
future_prices = scaler.inverse_transform(dummy_future)[:, 0]

# 14. Generate future dates
last_known_date = df.index[-1]
future_dates = pd.date_range(start=last_known_date + pd.Timedelta(days=1), periods=future_days, freq='D')

plt.figure(figsize=(14, 6))

# 1. Plot ground truth over entire period
plt.plot(df.index, df['price'], label='Actual (Ground Truth)', color='blue', linewidth=1)

# 2. Plot predicted values on the last 4 months (test set)
plt.plot(test_dates, y_pred, label='Predicted (Last 4 Months)', color='orange', linewidth=2)

# 3. Connect last prediction to first future forecast point
plt.plot(
    [test_dates[-1], future_dates[0]],
    [y_pred[-1], future_prices[0]],
    color='green', linestyle='--'
)

# 4. Plot future predicted prices (4-month forecast)
plt.plot(future_dates, future_prices, label='Future Forecast (Next 4 Months)', linestyle='--', marker='o', color='green', markersize=3)

# Decorate the plot
plt.title("LSTM Cocoa Price Forecast: Historical, Predicted (Last 4 Months), and Future Forecast")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.grid(True)
plt.show()

# 12. Forecast future daily prices (recursive for next 4 months)
future_days = 120  # approx 4 months
last_sequence = scaled_data[-seq_len:].copy()
future_predictions_scaled = []

for _ in range(future_days):
    input_seq = last_sequence.reshape(1, seq_len, scaled_data.shape[1])
    pred = model.predict(input_seq, verbose=0)[0][0]

    # Create next input row: predicted price, and 0 for PRCP and TAVG
    next_row = np.zeros((scaled_data.shape[1],))
    next_row[0] = pred  # predicted price

    # Update the sequence
    last_sequence = np.vstack((last_sequence[1:], next_row))
    future_predictions_scaled.append(pred)

# 13. Inverse transform predictions
dummy_future = np.zeros((len(future_predictions_scaled), scaled_data.shape[1]))
dummy_future[:, 0] = future_predictions_scaled
future_prices = scaler.inverse_transform(dummy_future)[:, 0]

# 14. Generate future dates
last_known_date = df.index[-1]
future_dates = pd.date_range(start=last_known_date + pd.Timedelta(days=1), periods=future_days, freq='D')

# 15. Plot
plt.figure(figsize=(14, 6))

# Plot actual and predicted on test set
plt.plot(test_dates, y_actual, label='Actual')
plt.plot(test_dates, y_pred, label='Predicted')

# Connect last prediction to future
plt.plot(
    [test_dates[-1], future_dates[0]],
    [y_pred[-1], future_prices[0]],
    color='green', linestyle='--'
)

# Plot future forecast
plt.plot(future_dates, future_prices, label='Future Forecast (Next 4 Months)', linestyle='--', marker='o', color='green', markersize=3)

plt.title("LSTM Forecast of Daily Cocoa Prices (Including 4-Month Future Forecast)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 16. Print forecast values
for date, price in zip(future_dates, future_prices):
    print(f"{date.strftime('%Y-%m-%d')}: {price:.2f}")

"""#Xboost"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler
from sklearn.metrics import mean_squared_error, mean_absolute_error
from xgboost import XGBRegressor

# 1. Load data
df = pd.read_csv("price_climate.csv", parse_dates=["date"])
df.set_index("date", inplace=True)

# 2. Select features
data = df[["Price_Monthly_Avg", "PRCP_Monthly_Avg", "TAVG_Monthly_Avg"]].fillna(0)

# 3. Normalize features
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(data)
scaled_df = pd.DataFrame(scaled_data, columns=data.columns, index=data.index)

# 4. Create lag-based supervised learning data for XGBoost
def create_lag_features(df, seq_len):
    X, y, dates = [], [], []
    for i in range(seq_len, len(df)):
        features = df.iloc[i - seq_len:i].values.flatten()
        target = df.iloc[i]["Price_Monthly_Avg"]
        X.append(features)
        y.append(target)
        dates.append(df.index[i])
    return np.array(X), np.array(y), np.array(dates)

seq_len = 12
X, y, all_dates = create_lag_features(scaled_df, seq_len)

# 5. Time-based split
train_cutoff = pd.Timestamp("2024-07-31")
test_start = pd.Timestamp("2024-08-31")

train_mask = all_dates <= train_cutoff
test_mask = all_dates >= test_start

X_train, y_train = X[train_mask], y[train_mask]
X_test, y_test = X[test_mask], y[test_mask]
test_dates = all_dates[test_mask]

# 6. Train XGBoost regressor
model = XGBRegressor(n_estimators=100, max_depth=4, learning_rate=0.1)
model.fit(X_train, y_train)

# 7. Predict and inverse-transform
y_pred = model.predict(X_test)

# Inverse transform predictions and actuals
dummy_pred = np.zeros((len(y_pred), scaled_data.shape[1]))
dummy_pred[:, 0] = y_pred
y_pred_inv = scaler.inverse_transform(dummy_pred)[:, 0]

dummy_actual = np.zeros((len(y_test), scaled_data.shape[1]))
dummy_actual[:, 0] = y_test
y_actual_inv = scaler.inverse_transform(dummy_actual)[:, 0]

# 8. Metrics
rmse = np.sqrt(mean_squared_error(y_actual_inv, y_pred_inv))
mae = mean_absolute_error(y_actual_inv, y_pred_inv)
mape = np.mean(np.abs((y_actual_inv - y_pred_inv) / y_actual_inv)) * 100

print(f"✅ RMSE: {rmse:.2f}")
print(f"✅ MAE: {mae:.2f}")
print(f"✅ MAPE: {mape:.2f}%")

# 9. Plot
plt.figure(figsize=(12, 6))
plt.plot(test_dates, y_actual_inv, label='Actual')
plt.plot(test_dates, y_pred_inv, label='Predicted (XGBoost)', color='orange')
plt.title("XGBoost Forecast of Cocoa Prices (Test: From 2024-08)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Forecasting"""

# 10. Forecast future months (recursive)
future_steps = 4
future_predictions_scaled = []
last_sequence = scaled_df[-seq_len:].copy()  # Last known sequence (12 rows)

for _ in range(future_steps):
    input_features = last_sequence.values.flatten().reshape(1, -1)
    pred_scaled = model.predict(input_features)[0]
    future_predictions_scaled.append(pred_scaled)

    # Create new row with predicted price and zeros for climate (can be updated with predicted or average climate)
    next_row = pd.DataFrame({
        "Price_Monthly_Avg": [pred_scaled],
        "PRCP_Monthly_Avg": [0],  # Placeholder for future PRCP
        "TAVG_Monthly_Avg": [0]   # Placeholder for future TAVG
    }, index=[last_sequence.index[-1] + pd.DateOffset(months=1)])

    last_sequence = pd.concat([last_sequence.iloc[1:], next_row])

# 11. Inverse transform
dummy_future = np.zeros((len(future_predictions_scaled), scaled_data.shape[1]))
dummy_future[:, 0] = future_predictions_scaled
future_prices = scaler.inverse_transform(dummy_future)[:, 0]

# 12. Generate future dates
last_known_date = scaled_df.index[-1]
future_dates = pd.date_range(start=last_known_date + pd.DateOffset(months=1), periods=future_steps, freq='M')

# 13. Plot including future forecast
plt.figure(figsize=(12, 6))

# Plot test results
plt.plot(test_dates, y_actual_inv, label='Actual')
plt.plot(test_dates, y_pred_inv, label='Predicted (XGBoost)', color='orange')

# Connect last predicted point to first future point
plt.plot(
    [test_dates[-1], future_dates[0]],
    [y_pred_inv[-1], future_prices[0]],
    color='green', linestyle='--'
)

# Plot future forecasts
plt.plot(future_dates, future_prices, label='Future Forecast (Next 4 Months)', linestyle='--', marker='o', color='green')

plt.title("XGBoost Forecast of Cocoa Prices (Including 4-Month Future Forecast)")
plt.xlabel("Date")
plt.ylabel("Price")
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Print values
for date, price in zip(future_dates, future_prices):
    print(f"{date.strftime('%Y-%m')}: {price:.2f}")